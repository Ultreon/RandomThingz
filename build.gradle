//file:noinspection GroovyUnusedAssignment
//file:noinspection GroovyAssignabilityCheck
//file:noinspection JCenterRepository

import com.google.gson.Gson
import com.google.gson.JsonObject
import com.google.gson.stream.JsonWriter

import java.nio.file.FileSystems
import java.nio.file.Files
import java.time.LocalDateTime
import java.time.ZoneId

buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url='https://dist.creeper.host/Sponge/maven' }
        jcenter()
        mavenCentral()
        maven {
            name "sonatype"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://github.com/QTechCommunity/Maven/raw/main/"
        }
        maven {
            url "https://maven.tterrag.com/"
        }
        maven {
            url "https://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
        classpath group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
        classpath "io.freefair.gradle:lombok-plugin:4.1.6"
    }
}

// Forge Gradle (REQUIRED)
apply plugin: 'net.minecraftforge.gradle'

// Other plugins.
apply plugin: 'maven'
apply plugin: 'java-library'
apply plugin: 'signing'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "io.freefair.lombok"

println('Java: ' + System.getProperty('java.version') + '\n JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')\n Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + "\n OS Version: " + System.getProperty("os.version"))

// Read build number file.
int version1 = Integer.parseInt(project.property("version").toString())
int release = Integer.parseInt(project.property("versionRelease").toString())
String stage = project.property("versionStage").toString()
int stageRelease = Integer.parseInt(project.property("versionStageRelease").toString())
String isDevTestString = project.property("isDevTest").toString()

String content = ""
String filePath = "buildnumber.txt"

println("Current Path: " + new File('.').getAbsolutePath())

try {
    content = new String(Files.readAllBytes(FileSystems.getDefault().getPath(project.getRootDir().getAbsolutePath(), filePath)))
} catch (IOException e) {
    throw new RuntimeException(e)
}

String buildNrString = content
Integer buildNumber = Integer.valueOf(buildNrString)

// Advance build number.
buildNumber++
println("Executing Build " + buildNumber)
String newBuild = buildNumber.toString()

// Write new build number.
FileOutputStream output = new FileOutputStream("${projectDir}/buildnumber.txt")
output.write(newBuild.getBytes())
output.flush()
output.close()


//boolean isDevTest = Boolean.parseBoolean(isDevTestString)

version = version1 + "." + release + '.' + buildNumber + "-" + stage + stageRelease
group = 'com.qtech' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'randomthingz'
jar.archiveVersion.set(version)

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println "Current version: " + version
println "Project: " + group + ":" + archivesBaseName
println "Bulding a Java " + compileJava.targetCompatibility + " project..."

mixin {
    add sourceSets.main, "randomthingz.refmap.json"
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/QTechCommunity/RandomThingz")
            credentials {
                username = System.getenv("GITHUB_USERNAME")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "QTGithubMaven"
            url = uri("/media/quint/DATA")
        }
    }
    publications {
        //noinspection GroovyAssignabilityCheck
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

repositories {
    maven {
        url "https://github.com/QTechCommunity/Maven/raw/main/"
    }
    maven {
        url "https://maven.tterrag.com/"
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: 'snapshot', version: '20210309-1.16.5'
    mappings channel: 'stable', version: 'qtech-1.16.5-19'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            arg "-mixin.config=randomthingz.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                randomthingz {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        clientTest {
            parent runs.client

            arg "-mixin.config=randomthingz.mixins.json"

            taskName "runClientTest"

            environment 'MOD_CLASSES', 'dummy'

            mods {
                randomthingz {
                    source sourceSets.main
                }
                test {
                    source sourceSets.test
                }
            }
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            arg "-mixin.config=randomthingz.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                randomthingz {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        data {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the forgemod for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'randomthingz',
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing-mod', 'computercraft',
                    '--existing-mod', 'jei'

            mods {
                randomthingz {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    jcenter()
    google()
    mavenCentral()
    mavenLocal()
    maven {
        name "Forge Maven New"
        url 'https://maven.minecraftforge.net'
    }
    maven {
        name "Forge Maven"
        url 'https://files.minecraftforge.net/maven'
    }
    maven {
        name "Sonatype"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven { // JEI
        name "Progwml6 Maven"
        url "http://dvs1.progwml6.com/files/maven/"
    }
    maven { // Fallback for JEI
        name "ModMaven"
        url "http://modmaven.k-4u.nl"
    }
    maven {
        name "SquidDev Maven"
        url 'http://squiddev.cc/maven/'
    }
    maven {
        name "JitPack"
        url 'http://jitpack.io'
    }
    maven {
        name "ImageJ"
        url 'http://maven.imagej.net/content/repositories/public/'
    }
    maven {
        name "Sponge Powered Maven"
        url 'https://repo.spongepowered.org/maven'
    }
    flatDir {
        name "Libraries Directory"
        dirs './libs'
    }
    maven {
        name "QTech Community Maven"
        url "https://github.com/QTechCommunity/Maven/raw/main/"
    }
//    maven {
//        url "file://${local_maven}"
//    }
}

compileJava {
    exclude("com/qtech/forgemod/script")
    exclude("com/qtech/scriptjs")
}

////////////////////////////
//     Configurations     //
////////////////////////////
configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

// Dependencies
dependencies {
    // Jetbrains Annotations
    implementation 'org.jetbrains:annotations:20.1.0'

    // Jamepad for Gamepads including XInput.
    compile group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'
    testCompile group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'
    extraLibs group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'

    // QModLib - Qboi's Library Mod.
    compileOnly fg.deobf(group: "com.qsoftware", name: "qmodlib", version: "1.0.40-b3", changing: true)
    testCompileOnly fg.deobf(group: "com.qsoftware", name: "qmodlib", version: "1.0.40-b3", changing: true)
    runtimeOnly fg.deobf(group: "com.qsoftware", name: "qmodlib", version: "1.0.40-b3", changing: true)

    // QModLib - Qboi's Library Mod.
    implementation group: "com.qtech.commons", name: "commons", version: "1.0.+"
    testImplementation group: "com.qtech.commons", name: "commons", version: "1.0.+"
    extraLibs group: "com.qtech.commons", name: "commons", version: "1.0.+"

    compileOnly 'org.projectlombok:lombok:1.18.18'
    annotationProcessor 'org.projectlombok:lombok:1.18.18'
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
    testCompileOnly 'org.projectlombok:lombok:1.18.18'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.18'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8:processor'

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft(group: "net.minecraftforge", name: "forge", version: "${mc_version}-${forge_version}"){
        force true
    }

    // JEI
    if (project.hasProperty("jei_version")) {
        // compile against the JEI API but do not include it at runtime
        compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
        // at runtime, use the full JEI jar
        runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
    }

    if (project.hasProperty("refined_storage_version")) {
        compile fg.deobf("com.raoulvdberge:refinedstorage:${project.refined_storage_version}")
    }
    implementation 'net.sf.mgp:maven-unclasses-plugin:0.0.6'
    implementation 'app.cash.exhaustive:exhaustive-annotation:0.1.1'
}

// process mods.toml to inject variables
def modsTomlSpec = copySpec{
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
    }
}
// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
        "$rootDir/out/production/resources", // IDEA
        "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources(type: Copy) {
    from("${projectDir}/src/main/resources/META-INF/mods.toml")
    outputs.upToDateWhen {
        false
    }

    filter { line -> line.replaceAll('\\\$\\\$MOD_VERSION\\\$\\\$', version.toString()) }
    into new File(processResources.destinationDir, "META-INF")
}

// task to add mods.toml to all relevant folders
task qfmArgs(type: Copy) {
    from("${projectDir}/qfm_args.json")
    outputs.upToDateWhen {
        false
    }

    into new File(processResources.destinationDir, "META-INF")
}

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
    finalizedBy qfmArgs
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier 'sources'
}

artifacts {
    archives sourcesJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        //noinspection GrDeprecatedAPIUsage
        attributes([
                "Main-Class": "com.qtech.forgemod.Main",
                "Specification-Title": "Random Thingz",
                "Specification-Vendor": "QTech Community",
                "Specification-Version": version,
                "Implementation-Title": project.name,
                "Implementation-Version": version,
                "Implementation-Vendor" :"QTech Community",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "randomthingz.mixins.json",
                "Build-Number": build.toString()
        ])
    }
    from {
        configurations.extraLibs.collect {
            if (it.getName().endsWith(".zip") || it.getName().endsWith(".jar") || it.isDirectory()) {
                try {
                    return it.isDirectory() ? it : zipTree(it)
                } catch (Exception e) {
                    System.out.println("Error occurred when expanding zip: " + it.getPath())
                    e.printStackTrace()
                }
            }
            return new ArrayList<>()
        }
    }
    zip64 = true
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

/**
 * Upload jars to local or ftp maven repository.
 */
task("uploadJars", dependsOn: "build") {
    // Set description.
    description = "uploads JARs"

    // Has local or sftp maven property.
    if (project.hasProperty("local_maven") || project.hasProperty("sftp_maven")) {
        // Apply plugins.
        apply plugin: 'maven'

        // Upload archives.
        uploadArchives {
            // Repositories.
            repositories {
                // Has local maven property.
                if (project.hasProperty("local_maven")) {
                    // Maven deployer for local repos.
                    mavenDeployer {
                        // Local maven repository url (in local filesystem).
                        repository(url: "file://${local_maven}")
                    }
                }

                // Has sftp maven property.
                if (project.hasProperty("sftp_maven")) {
                    // Maven deployer for sftp.
                    repositories.mavenDeployer {
                        configuration = configurations.deployerJars
                        repository(url: "sftp://${sftp_maven}") {
                             authentication(userName: "${sftp_username}", privateKey: "${sftp_key}")
                        }
                    }
                }
            }
            return new ArrayList<>()
        }
    }
}

Gson gson = new Gson()
JsonObject json = new JsonObject()

// \version
JsonObject versionJ = new JsonObject()
versionJ.addProperty "name", version.toString()
versionJ.addProperty "version", version1
versionJ.addProperty "release", release
versionJ.addProperty "build", buildNumber
versionJ.addProperty "stage", stage
versionJ.addProperty "stage_release", stageRelease

// \flags
JsonObject flagsJ = new JsonObject()
flagsJ.addProperty "dev_test", isDevTest
json.add("flags", flagsJ)
JsonObject buildInfoJ = new JsonObject()
buildInfoJ.addProperty("date", LocalDateTime.now(ZoneId.systemDefault()).toString())

// \compile
JsonObject compileJ = new JsonObject()
compileJ.addProperty "name", compileJava.name
compileJ.addProperty "source_compat", compileJava.sourceCompatibility
compileJ.addProperty "target_compat", compileJava.targetCompatibility

// \project
JsonObject projectJ = new JsonObject()
projectJ.addProperty "name", project.name != null ? project.name : ""
projectJ.addProperty "display_name", project.displayName != null ? project.displayName : ""

JsonObject minecraftJ = new JsonObject()
minecraftJ.addProperty "mappings_version", "${project.mappingsVersion}"
minecraftJ.addProperty "mappings_channel", "${project.mappingsChannel}"
minecraftJ.addProperty "mappings", "${project.mappingsChannel}_${project.mappingsVersion}"
minecraftJ.addProperty "version", "${project.mc_version}"
minecraftJ.addProperty "forge_version", "${project.forge_version}"

// \project\gradle
JsonObject gradleJ = new JsonObject()
gradleJ.addProperty "version", gradle.gradleVersion

compileJ  .add "gradle",     gradleJ
projectJ  .add "minecraft",  minecraftJ
buildInfoJ.add "compile",    compileJ
buildInfoJ.add "project",    projectJ
json      .add "version",    versionJ
json      .add "build_info", buildInfoJ

File qfmArgsFile = new File("${projectDir}/qfm_args.json")
//File qfmArgsFile = new File("qfm_args.json")
if (qfmArgsFile.exists()) {
    qfmArgsFile.delete()
}
FileWriter fileWriter = new FileWriter(qfmArgsFile)
JsonWriter jsonWriter = new JsonWriter(fileWriter)
jsonWriter.setIndent("   ")
gson.toJson(json, jsonWriter)
fileWriter.flush()
fileWriter.close()
