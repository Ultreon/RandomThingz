//file:noinspection GroovyUnusedAssignment
//file:noinspection GroovyAssignabilityCheck
//file:noinspection JCenterRepository

import java.time.LocalDate
import java.time.LocalTime
buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "io.freefair.gradle:lombok-plugin:4.1.6"
    }
}

// Forge Gradle (REQUIRED)
apply plugin: 'net.minecraftforge.gradle'

// Other plugins.
apply plugin: 'java-library'
apply plugin: 'signing'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "io.freefair.lombok"
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

println('Java: ' + System.getProperty('java.version') + '\n JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')\n Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + "\n OS Version: " + System.getProperty("os.version"))

boolean isDevTest = Boolean.parseBoolean rootProject.property("isDevTest").toString()

def final SECOND_INTERVAL = 15

if (isDevTest) {
    version "Dev"
} else {
//    version = version1 + "." + release + '.' + buildNumber + "-" + stage + stageRelease
    def date = LocalDate.now()
    def time = LocalTime.now()
    version "" + (date.year - 1985) + "." + date.dayOfYear + "." + ((time.hour * 3600 + time.minute * 60 + time.second) / SECOND_INTERVAL as Integer)
}

group 'com.qtech' // https://maven.apache.org/guides/mini/guide-naming-conventions.html

println "Current version: " + version
println "Project: " + group + ":" + archivesBaseName
println "Bulding a Java " + compileJava.targetCompatibility + " project..."

mixin {
    add sourceSets.main, "randomthingz.refmap.json"
}

java {
    archivesBaseName = 'randomthingz'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

repositories {
    maven {
        url "https://github.com/QTechCommunity/Maven/raw/main/"
    }
    maven {
        url "https://maven.tterrag.com/"
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: 'snapshot', version: '20210309-1.16.5'
    mappings channel: 'official', version: '1.18.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('runClient')
            arg "-mixin.config=randomthingz.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            environment 'MOD_CLASSES', 'dummy'

            mods {
                randomthingz {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        clientTest {
            workingDirectory project.file('runClientTest')
            parent runs.client

            taskName "runClientTest"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            environment 'MOD_CLASSES', 'dummy'

            mods {
                randomthingz {
                    source sourceSets.main
                }
                test {
                    source sourceSets.test
                }
            }
        }

        clientAlt {
            workingDirectory project.file('runClientAlt')
            parent runs.client

            taskName "runClientTest"

            arg "-mixin.config=randomthingz.mixins.json"
            arg "--username=DevAlt"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            environment 'MOD_CLASSES', 'dummy'

            mods {
                randomthingz {
                    source sourceSets.main
                }
                test {
                    source sourceSets.test
                }
            }
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('runServer')
            arg "-mixin.config=randomthingz.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                randomthingz {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        data {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('runData')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the forgemod for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'randomthingz',
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing-mod', 'computercraft',
                    '--existing-mod', 'jei'

            mods {
                randomthingz {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    google()
    mavenCentral()
    mavenLocal()
    maven {
        name "Forge Maven New"
        url 'https://maven.minecraftforge.net'
    }
    maven {
        name "Sonatype"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven { // JEI
        name "Progwml6 Maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // Fallback for JEI
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
    maven {
        name "SquidDev Maven"
        url 'https://squiddev.cc/maven/'
    }
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    maven {
        name "ImageJ"
        url 'https://maven.imagej.net/content/repositories/public/'
    }
    maven {
        name "Sponge Powered Maven"
        url 'https://repo.spongepowered.org/maven'
    }
    flatDir {
        name "Libraries Directory"
        dirs './libs'
    }
    maven {
        name "QTech Community Maven"
        url "https://github.com/QTechCommunity/Maven/raw/main/"
    }
//    maven {
//        url "file://${local_maven}"
//    }
}

compileJava {
    exclude("com/qtech/forgemod/script")
    exclude("com/qtech/scriptjs")
}

////////////////////////////
//     Configurations     //
////////////////////////////
configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

// Dependencies
dependencies {
    // Jetbrains Annotations
    implementation 'org.jetbrains:annotations:22.0.0'

    // Jamepad for Gamepads including XInput.
    implementation group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'
    testImplementation group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'
    extraLibs group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'

    // QModLib - Qboi's Library Mod.
    compileOnly fg.deobf(group: "com.qsoftware", name: "qmodlib", version: "1.0.40-b3", changing: true)
    testCompileOnly fg.deobf(group: "com.qsoftware", name: "qmodlib", version: "1.0.40-b3", changing: true)
    runtimeOnly fg.deobf(group: "com.qsoftware", name: "qmodlib", version: "1.0.40-b3", changing: true)

    // QModLib - Qboi's Library Mod.
    implementation group: "com.qtech.commons", name: "commons", version: "1.0.+"
    testImplementation group: "com.qtech.commons", name: "commons", version: "1.0.+"
    extraLibs group: "com.qtech.commons", name: "commons", version: "1.0.+"

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.18'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8.3:processor'

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft(group: "net.minecraftforge", name: "forge", version: "1.18.1-39.0.36"){
        force true
    }

    // JEI
    if (project.hasProperty("jei_version")) {
        // implementation against the JEI API but do not include it at runtime
        compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
        // at runtime, use the full JEI jar
        runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
    }

    if (project.hasProperty("refined_storage_version")) {
        implementation fg.deobf("com.raoulvdberge:refinedstorage:${project.refined_storage_version}")
    }
    implementation 'net.sf.mgp:maven-unclasses-plugin:0.0.6'
    implementation 'app.cash.exhaustive:exhaustive-annotation:0.2.0'
}

// process mods.toml to inject variables
def modsTomlSpec = copySpec{
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
    }
}
// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
        "$rootDir/out/production/resources", // IDEA
        "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources(type: Copy) {
    from("${projectDir}/mods.toml")
    outputs.upToDateWhen {
        false
    }

    filter { line -> line.replaceAll('\\\$\\\$MOD_VERSION\\\$\\\$', version.toString()) }
    into new File(processResources.destinationDir, "META-INF")
    into new File("${projectDir}/src/main/resources", "META-INF")
}

//// task to add mods.toml to all relevant folders
//task qfmArgs(type: Copy) {
//    from("${projectDir}/qfm_args.json")
//    outputs.upToDateWhen {
//        false
//    }
//
//    into new File(processResources.destinationDir, "META-INF")
//    into new File("${projectDir}/src/main/resources/META-INF")
//}

processResources {
//    exclude 'META-INF/mods.toml'
//    exclude 'META-INF/qfm_args.json'
    finalizedBy replaceResources
//    finalizedBy qfmArgs
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier 'sources'
}

artifacts {
    archives sourcesJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        //noinspection GrDeprecatedAPIUsage
        attributes([
                "Main-Class": "com.qtech.forgemod.Main",
                "Specification-Title": "Random Thingz",
                "Specification-Vendor": "QTech Community",
                "Specification-Version": version,
                "Implementation-Title": project.name,
                "Implementation-Version": version,
                "Implementation-Vendor" :"QTech Community",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "randomthingz.mixins.json",
                "Build-Number": build.toString()
        ])
    }
    from {
        configurations.extraLibs.collect {
            if (it.getName().endsWith(".zip") || it.getName().endsWith(".jar") || it.isDirectory()) {
                try {
                    return it.isDirectory() ? it : zipTree(it)
                } catch (Exception e) {
                    System.out.println("Error occurred when expanding zip: " + it.getPath())
                    e.printStackTrace()
                }
            }
            return new ArrayList<>()
        }
    }
    zip64 = true
}

tasks.withType(ProcessResources).configureEach {
//    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.withType(JavaCompile).configureEach {
    it.options.fork = true
}

publishing {
    repositories {
        maven {
            name = "GitHubMaven"
            url = uri("${projectDir}/.maven_repo")
        }
    }
    publications {
        //noinspection GroovyAssignabilityCheck
        gpr(MavenPublication) {
            from components.java
        }
    }
}
