import com.google.gson.*
import com.google.gson.stream.*
import com.google.gson.stream.JsonWriter
import org.apache.commons.io.FileUtils
import sun.misc.IOUtils

import java.time.LocalDateTime
import java.time.ZoneId

buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url='https://dist.creeper.host/Sponge/maven' }
        jcenter()
        mavenCentral()
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
        classpath group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
        classpath "io.freefair.gradle:lombok-plugin:4.1.6"
    }
}

// Forge Gradle (REQUIRED)
apply plugin: 'net.minecraftforge.gradle'

// Other plugins.
apply plugin: 'maven'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "io.freefair.lombok"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

// Read build number file.
int vers = Integer.parseInt(project.property("version").toString())
int release = Integer.parseInt(project.property("versionRelease").toString())
String stage = project.property("versionStage").toString()
int stageRelease = Integer.parseInt(project.property("versionStageRelease").toString())
String isDevTestString = project.property("isDevTest").toString()

FileInputStream fileInputStream = new FileInputStream("buildnumber.txt")
String buildNrString = new String(IOUtils.readAllBytes(fileInputStream))
fileInputStream.close()
Integer buildNumber = Integer.valueOf(buildNrString)

// Advance build number.
buildNumber++
println("Executing build " + buildNumber)
String newBuild = buildNumber.toString()

// Write new build number.
FileOutputStream output = new FileOutputStream("buildnumber.txt")
output.write(newBuild.getBytes())
output.flush()
output.close()

boolean isDevTest = Boolean.parseBoolean(isDevTestString)

version = vers + "." + release + '.' + buildNumber + "-" + stage + stageRelease
group = 'com.qtech.forgemod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'randomthingz'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println("Current version: " + version)
println("Project: " + group + ":" + archivesBaseName)
println("Bulding a Java " + compileJava.targetCompatibility + " project...")

mixin {
    add sourceSets.main, "randomthingz.refmap.json"
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            arg "-mixin.config=randomthingz.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                qforgemod {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            arg "-mixin.config=randomthingz.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                qforgemod {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        data {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the forgemod for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'randomthingz', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                qforgemod {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    jcenter()
    mavenLocal()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }
    maven {
        url 'http://squiddev.cc/maven/'
    }
    maven {
        url 'http://jitpack.io'
    }
    maven {
        url 'http://maven.imagej.net/content/repositories/public/'
    }
    flatDir {
        dirs 'D:\\Github\\QForgeMod\\libs'
    }
    maven {
        url "file://${local_maven}"
    }
}

////////////////////////////
//     Configurations     //
////////////////////////////
configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

// Dependencies
dependencies {
    // Jetbrains Annotations
    implementation 'org.jetbrains:annotations:19.0.0'

    // Jamepad for Gamepads including XInput.
    // https://mvnrepository.com/artifact/com.github.WilliamAHartman/Jamepad
    compile group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'

    // QModLib - Qboi's Library Mod.
    compileOnly fg.deobf(group: "com.qsoftware", name: "qmodlib", version: "1.0-beta1")
    runtimeOnly fg.deobf(group: "com.qsoftware", name: "qmodlib", version: "1.0-beta1")

    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Apache dependencies.
    extraLibs group: 'org.apache.lucene', name: 'lucene-core', version: '8.7.0'
    extraLibs group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: '8.7.0'
    extraLibs group: 'commons-io', name: 'commons-io', version: '2.8.0'
    extraLibs group: 'commons-codec', name: 'commons-codec', version: '1.15'
    extraLibs group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    extraLibs group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    extraLibs group: 'org.apache.commons', name: 'commons-compress', version: '+'
    extraLibs group: 'org.apache.commons', name: 'commons-math3', version: '3.+'
    extraLibs group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    extraLibs group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    extraLibs group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'
    extraLibs group: 'org.apache.commons', name: 'commons-jexl', version: '2.1.1'
    extraLibs group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    extraLibs group: 'xml-resolver', name: 'xml-resolver', version: '1.2'
    extraLibs group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    implementation group: 'org.apache.lucene', name: 'lucene-core', version: '8.7.0'
    implementation group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: '8.7.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    implementation group: 'org.apache.commons', name: 'commons-compress', version: '+'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.+'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'
    implementation group: 'org.apache.commons', name: 'commons-jexl', version: '2.1.1'
    implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    implementation group: 'xml-resolver', name: 'xml-resolver', version: '1.2'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.26'

    // Bson library.
    extraLibs group: 'org.mongodb', name: 'bson', version: '4.1.1'
    implementation group: 'org.mongodb', name: 'bson', version: '4.1.1'

    // JEI
    if (project.hasProperty("jei_version")) {
        // compile against the JEI API but do not include it at runtime
        compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
        // at runtime, use the full JEI jar
        runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
    }

    // CC Tweaked
    if (project.hasProperty("cctweaked_version")) {
        compile fg.deobf("org.squiddev:cc-tweaked-${project.cctweaked_version}")
    }

    if (project.hasProperty("refined_storage_version")) {
        compile fg.deobf("com.raoulvdberge:refinedstorage:${project.refined_storage_version}")
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Main-Class": "com.qtech.forgemod.Main",
                "Specification-Title": "randomthingz",
                "Specification-Vendor": "qsoftware",
                "Specification-Version": "1.2-alpha3-DEVTEST",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"qsoftware",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "randomthingz.mixins.json",
                "Build-Number": build.toString()
        ])
    }
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

/**
 * Copy build-number task, used to copy the build number when jar fill is being generated, reducing build time for testing only.
 */
task("copyBuildNumber") {
    FileInputStream fis = new FileInputStream("buildnumber.txt")
    FileUtils.copyToFile(fis, new File("src/main/resources/META-INF/buildnumber.txt"))
    fis.close()
}

/**
 * Upload jars to local or ftp maven repository.
 */
task("uploadJars", dependsOn: "build") {
    // Set description.
    description = "uploads JARs"

    // Has local or sftp maven property.
    if (project.hasProperty("local_maven") || project.hasProperty("sftp_maven")) {
        // Apply plugins.
        apply plugin: 'maven'

        // Upload archives.
        uploadArchives {
            // Repositories.
            repositories {
                // Has local maven property.
                if (project.hasProperty("local_maven")) {
                    // Maven deployer for local repos.
                    mavenDeployer {
                        // Local maven repository url (in local filesystem).
                        repository(url: "file://${local_maven}")
                    }
                }

                // Has sftp maven property.
                if (project.hasProperty("sftp_maven")) {
                    // Maven deployer for sftp.
                    repositories.mavenDeployer {
                        configuration = configurations.deployerJars
                        repository(url: "sftp://${sftp_maven}") {
                            authentication(userName: "${sftp_username}", privateKey: "${sftp_key}")
                        }
                    }
                }
            }
        }
    }
}

// Copy build number from project root to the jar.
jar.dependsOn("copyBuildNumber")

// Upload jars to local of sftp maven.
jar.finalizedBy(uploadJars)

Gson gson = new Gson()
JsonObject json = new JsonObject();

// \version
JsonObject versionJ = new JsonObject()
versionJ.addProperty "name", version.toString()
versionJ.addProperty "version", vers
versionJ.addProperty "release", release
versionJ.addProperty "build", buildNumber
versionJ.addProperty "stage", stage
versionJ.addProperty "stage_release", stageRelease

// \flags
JsonObject flagsJ = new JsonObject()
flagsJ.addProperty "dev_test", isDevTest
json.add("flags", flagsJ)
JsonObject buildInfoJ = new JsonObject()
buildInfoJ.addProperty("date", LocalDateTime.now(ZoneId.systemDefault()).toString())

// \compile
JsonObject compileJ = new JsonObject()
compileJ.addProperty "name", compileJava.name
compileJ.addProperty "source_compat", compileJava.sourceCompatibility
compileJ.addProperty "target_compat", compileJava.targetCompatibility

// \project
JsonObject projectJ = new JsonObject()
projectJ.addProperty "name", project.name != null ? project.name : ""
projectJ.addProperty "display_name", project.displayName != null ? project.displayName : ""

JsonObject minecraftJ = new JsonObject();
minecraftJ.addProperty "mappings_version", "${project.mappingsVersion}"
minecraftJ.addProperty "mappings_channel", "${project.mappingsChannel}"
minecraftJ.addProperty "mappings", "${project.mappingsChannel}_${project.mappingsVersion}"
minecraftJ.addProperty "version", "${project.mc_version}"
minecraftJ.addProperty "forge_version", "${project.forge_version}"

// \project\gradle
JsonObject gradleJ = new JsonObject();
gradleJ.addProperty "version", gradle.gradleVersion

compileJ  .add "gradle",     gradleJ
projectJ  .add "minecraft",  minecraftJ
buildInfoJ.add "compile",    compileJ
buildInfoJ.add "project",    projectJ
json      .add "version",    versionJ
json      .add "build_info", buildInfoJ

//File qfmArgsFile = new File("src/main/resources/META-INF/qfm_args.json")
File qfmArgsFile = new File("qfm_args.json")
if (qfmArgsFile.exists()) {
    qfmArgsFile.delete()
}
FileWriter fileWriter = new FileWriter(qfmArgsFile)
JsonWriter jsonWriter = new JsonWriter(fileWriter)
jsonWriter.setIndent("   ")
gson.toJson(json, jsonWriter)
fileWriter.flush()
fileWriter.close()
